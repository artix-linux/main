From b73e51557b018b3aaf55b26db8020315560df55c Mon Sep 17 00:00:00 2001
From: Artem Gindinson <artem.gindinson@intel.com>
Date: Fri, 24 Jun 2022 08:15:02 +0000
Subject: [PATCH]  Fix AlignmentAnalysis test failures on LLVM 14

Whenever `getAlignValue()` returned 64-bit `llvm::Value::MaximumAlignment`,
previous type cast adjustments for LLVM 14 ended up truncating the result to 0,
which in turn sparked incorrect comparison results. Adjust type casting to fix
crashes/incorrect `align` values in the LIT tests.

(cherry picked from commit 52109330c13213844ee7c7d471a8cc455a3517ee)
---
 .../AlignmentAnalysis/AlignmentAnalysis.cpp            | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/IGC/Compiler/Optimizer/OpenCLPasses/AlignmentAnalysis/AlignmentAnalysis.cpp b/IGC/Compiler/Optimizer/OpenCLPasses/AlignmentAnalysis/AlignmentAnalysis.cpp
index 8516e69af..21d07a58a 100644
--- a/IGC/Compiler/Optimizer/OpenCLPasses/AlignmentAnalysis/AlignmentAnalysis.cpp
+++ b/IGC/Compiler/Optimizer/OpenCLPasses/AlignmentAnalysis/AlignmentAnalysis.cpp
@@ -181,17 +181,17 @@ auto AlignmentAnalysis::getAlignValue(Value* V) const
 bool AlignmentAnalysis::processInstruction(llvm::Instruction* I)
 {
     // Get the currently known alignment of I.
-    unsigned int currAlign = getAlignValue(I);
+    alignment_t currAlign = getAlignValue(I);
 
     // Compute the instruction's alignment
     // using the alignment of the arguments.
-    unsigned int newAlign = 0;
+    alignment_t newAlign = 0;
     if (I->getType()->isPointerTy())
     {
         // If a pointer is specifically given an 'align' field in the MD, use it.
         MDNode* alignmentMD = I->getMetadata("align");
         if (alignmentMD)
-            newAlign = (unsigned)mdconst::dyn_extract<ConstantInt>(alignmentMD->getOperand(0))->getZExtValue();
+            newAlign = (alignment_t)mdconst::dyn_extract<ConstantInt>(alignmentMD->getOperand(0))->getZExtValue();
     }
     if (!newAlign)
     {
@@ -208,7 +208,7 @@ bool AlignmentAnalysis::processInstruction(llvm::Instruction* I)
 
     if (newAlign != currAlign)
     {
-        m_alignmentMap[I] = newAlign;
+        m_alignmentMap[I] = (unsigned)newAlign;
         return true;
     }
 
@@ -381,7 +381,7 @@ unsigned int AlignmentAnalysis::visitGetElementPtrInst(GetElementPtrInst& I)
         {
             Ty = GTI.getIndexedType();
             unsigned int multiplier = int_cast<unsigned int>(m_DL->getTypeAllocSize(Ty));
-            offset = multiplier * getAlignValue(*op);
+            offset = multiplier * (unsigned)getAlignValue(*op);
         }
 
         // It's possible offset is not a power of 2, because struct fields
